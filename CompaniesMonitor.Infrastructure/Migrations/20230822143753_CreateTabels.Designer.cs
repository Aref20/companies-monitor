// <auto-generated />
using System;
using MSGCompaniesMonitor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CompaniesMonitor.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230822143753_CreateTabels")]
    partial class CreateTabels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MSGCompaniesMonitor.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CapitalJD")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.CompanyPartner", b =>
                {
                    b.Property<int>("CompanyPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyPartnerId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("CompanyPartnerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PartnerId");

                    b.ToTable("CompaniesPartner");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompaniesType");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentsType");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.Partner", b =>
                {
                    b.Property<int>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartnerId"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("SharedJD")
                        .HasColumnType("float");

                    b.HasKey("PartnerId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.Company", b =>
                {
                    b.HasOne("MSGCompaniesMonitor.Models.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeId");

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.CompanyPartner", b =>
                {
                    b.HasOne("MSGCompaniesMonitor.Models.Company", "Company")
                        .WithMany("CompaniesPartner")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSGCompaniesMonitor.Models.Partner", "Partner")
                        .WithMany("CompaniesPartner")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.DocumentType", b =>
                {
                    b.HasOne("MSGCompaniesMonitor.Models.Company", "Company")
                        .WithMany("DocumentesType")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MSGCompaniesMonitor.Models.Document", "Document")
                        .WithMany("DocumentesType")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.UploadedFile", b =>
                {
                    b.HasOne("MSGCompaniesMonitor.Models.DocumentType", "DocumentType")
                        .WithMany("Files")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.Company", b =>
                {
                    b.Navigation("CompaniesPartner");

                    b.Navigation("DocumentesType");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.CompanyType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.Document", b =>
                {
                    b.Navigation("DocumentesType");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.DocumentType", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("MSGCompaniesMonitor.Models.Partner", b =>
                {
                    b.Navigation("CompaniesPartner");
                });
#pragma warning restore 612, 618
        }
    }
}
